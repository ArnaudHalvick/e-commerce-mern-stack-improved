// backend/controllers/productController.js

const Product = require("../models/Product");

// Helper function to transform product data from MongoDB to proper JSON
const formatProductForClient = (product) => {
  if (!product) return null;

  // If product is already a plain object (not a mongoose document)
  if (!product.toObject) {
    return product;
  }

  // Convert mongoose document to plain object
  const productObj = product.toObject({ virtuals: true });

  // Ensure _id is properly passed
  if (productObj._id) {
    productObj._id = productObj._id.toString();
  }

  return productObj;
};

// Add a new product
const addProduct = async (req, res) => {
  try {
    // Set new_price to 0 if not provided or is 0
    const new_price = req.body.new_price || 0;

    const product = new Product({
      // Slug will be automatically generated by the mongoose-slug-generator
      images: req.body.images,
      mainImageIndex: req.body.mainImageIndex || 0,
      name: req.body.name,
      shortDescription: req.body.shortDescription,
      longDescription: req.body.longDescription,
      category: req.body.category,
      new_price: new_price,
      old_price: req.body.old_price,
      sizes: req.body.sizes || ["S", "M", "L", "XL", "XXL"],
      tags: req.body.tags || [],
      types: req.body.types || [],
      date: req.body.date,
      available: req.body.available,
    });

    await product.save();

    res.json({
      success: true,
      name: req.body.name,
      slug: product.slug,
      _id: product._id.toString(),
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

// Remove a product
const removeProduct = async (req, res) => {
  try {
    let product;

    if (req.body.slug) {
      product = await Product.findOneAndDelete({ slug: req.body.slug });
    } else if (req.body._id) {
      product = await Product.findByIdAndDelete(req.body._id);
    } else if (req.body.id) {
      // For backwards compatibility - id could be either a MongoDB _id or a legacy id
      // Try to use it as MongoDB ID first
      try {
        product = await Product.findByIdAndDelete(req.body.id);
      } catch (err) {
        // If that fails, we'll just return product not found below
        console.log("Error trying to find by ID:", err);
      }
    } else {
      return res.status(400).json({
        success: false,
        message: "Missing product identifier (slug, _id, or id)",
      });
    }

    if (!product) {
      return res.status(404).json({
        success: false,
        message: "Product not found",
      });
    }

    res.json({
      success: true,
      name: product.name,
      message: "Product deleted successfully",
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

// Get all products
const getAllProducts = async (req, res) => {
  try {
    let products = await Product.find().populate({
      path: "reviews",
      populate: { path: "user", select: "name" },
    });

    // Format products to ensure _id is properly sent to client
    const formattedProducts = products.map(formatProductForClient);

    res.send(formattedProducts);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

// Get new collection
const getNewCollection = async (req, res) => {
  try {
    let products = await Product.find().populate({
      path: "reviews",
      populate: { path: "user", select: "name" },
    });
    let newcollection = products.slice(-8);

    // Format products to ensure _id is properly sent to client
    const formattedProducts = newcollection.map(formatProductForClient);

    res.send(formattedProducts);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

// Get featured women's products
const getFeaturedWomen = async (req, res) => {
  try {
    let products = await Product.find({
      category: "women",
    }).populate({
      path: "reviews",
      populate: { path: "user", select: "name" },
    });
    let featured_product = products.slice(0, 4);

    // Format products to ensure _id is properly sent to client
    const formattedProducts = featured_product.map(formatProductForClient);

    res.send(formattedProducts);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

// Get products by tag
const getProductsByTag = async (req, res) => {
  try {
    const { tag } = req.params;
    let products = await Product.find({ tags: tag }).populate({
      path: "reviews",
      populate: { path: "user", select: "name" },
    });

    // Format products to ensure _id is properly sent to client
    const formattedProducts = products.map(formatProductForClient);

    res.send(formattedProducts);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

// Get products by type
const getProductsByType = async (req, res) => {
  try {
    const { type } = req.params;
    let products = await Product.find({ types: type }).populate({
      path: "reviews",
      populate: { path: "user", select: "name" },
    });

    // Format products to ensure _id is properly sent to client
    const formattedProducts = products.map(formatProductForClient);

    res.send(formattedProducts);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

// Add a new route to get a single product by ID
const getProductById = async (req, res) => {
  try {
    const { id } = req.params;
    let product = await Product.findById(id).populate({
      path: "reviews",
      populate: { path: "user", select: "name" },
    });

    if (!product) {
      return res.status(404).json({
        success: false,
        message: "Product not found",
      });
    }

    // Format the product
    const formattedProduct = formatProductForClient(product);

    res.send(formattedProduct);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

// Add a new route to get a single product by slug
const getProductBySlug = async (req, res) => {
  try {
    const { slug } = req.params;
    let product = await Product.findOne({ slug }).populate({
      path: "reviews",
      populate: { path: "user", select: "name" },
    });

    if (!product) {
      return res.status(404).json({
        success: false,
        message: "Product not found",
      });
    }

    // Format the product
    const formattedProduct = formatProductForClient(product);

    res.send(formattedProduct);
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

module.exports = {
  addProduct,
  removeProduct,
  getAllProducts,
  getNewCollection,
  getFeaturedWomen,
  getProductsByTag,
  getProductsByType,
  getProductById,
  getProductBySlug,
  formatProductForClient,
};
